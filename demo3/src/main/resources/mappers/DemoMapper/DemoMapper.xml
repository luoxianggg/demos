<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lx.project.demo3.dao.DemoMapper">
	<select id="queryTest" parameterType="java.util.Map" resultType="com.lx.project.demo3.model.order.Order">
		select id,name,message_id  from t_order
	</select>
	<select id="queryOrderById" parameterType="java.util.Map"  resultType="com.lx.project.demo3.model.order.Order">
		<![CDATA[
          select id, name, message_id
              from t_order
              where id = #{id,jdbcType=DECIMAL}
          ]]>
	</select>

	<update id="insertOrder" parameterType="java.util.Map">
		insert into t_order(
		id,
		name,
		message_id
		) values(
		#{id,jdbcType=DECIMAL},
		#{name,jdbcType=DECIMAL},
		#{message_id,jdbcType=DECIMAL}
		)
	</update>

	<update id="update_order_name" parameterType="java.util.Map" >
		update t_order t
		set t.name = #{name,jdbcType=VARCHAR}
		where t.id = #{Id,jdbcType=VARCHAR}
	</update>

	<select id="query4StatusAndTimeoutMessage" parameterType="java.util.Map" resultType="com.lx.project.demo3.model.order.BrokerMessageLog">
		select message_id ,
		message ,
		try_count ,
		status ,
		next_retry ,
		create_time ,
		update_time
		from broker_message_log bml
		where status = '0'
		and next_retry &lt;= sysdate()

	</select>

	<update id="update4ReSend" parameterType="java.util.Map">
		update broker_message_log bml
		set bml.try_count = bml.try_count + 1,
		bml.update_time = #{update_time, jdbcType=TIMESTAMP}
		where bml.message_id = #{message_id,jdbcType=VARCHAR}
	</update>

	<update id="changeBrokerMessageLogStatus" parameterType="java.util.Map">
		update broker_message_log bml
		set bml.status = #{status,jdbcType=VARCHAR}
		where bml.message_id = #{message_id,jdbcType=VARCHAR}
	</update>

	<update id="insertBrokerMessageLog" parameterType="java.util.Map">
		insert broker_message_log (
		message_id,
		message,
		status,
		next_retry,
		create_time,
		update_time)
		values(
		#{message_id,jdbcType=VARCHAR},
		#{message,jdbcType=VARCHAR},
		#{status,jdbcType=VARCHAR},
		#{next_retry,jdbcType=TIMESTAMP},
		#{create_time,jdbcType=TIMESTAMP},
		#{update_time,jdbcType=TIMESTAMP}
		)

	</update>

	<select id="getJobAndTriggerDetails" parameterType="java.util.Map" resultType="com.lx.project.demo3.model.JobAndTrigger">

		SELECT

		qjd.JOB_NAME,

		qjd.JOB_GROUP,

		qjd.JOB_CLASS_NAME,

		qt.TRIGGER_NAME,

		qt.TRIGGER_GROUP,

		qct.CRON_EXPRESSION,

		qct.TIME_ZONE_ID

		FROM

		QRTZ_JOB_DETAILS qjd

		JOIN QRTZ_TRIGGERS qt

		JOIN QRTZ_CRON_TRIGGERS qct

		ON qjd.JOB_NAME = qt.JOB_NAME

		AND qt.TRIGGER_NAME = qct.TRIGGER_NAME

		AND qt.TRIGGER_GROUP = qct.TRIGGER_GROUP

	</select>
</mapper>